Laravel

composer create-project laravel/laravel project_name : Crear proyecto


Artisan
php artisan serve : Iniciar el proyecto laravel en el servidor desde la consola.
php artisan make:model name -m : Crear plantilla Model recibir o enviar la información a la base de datos.
php artisan migrate : Ejecutar todas las migraciones disponibles.
php artisan migrate:rollback : Deshacer la ultima migracion.
php artisan make:controller nameController : Crear plantilla Model Unir vista con el modelo.

Blade Templates
@extends('template_name') : Referenciar plantilla con el @yield para su extención.
@yield('section_name') : Encapsular contenido de una section html o css debe ir acompañado de @include.
@section('name') -> @endsection : Invocar un bloque una sección de código.

Routes
routes/web.php -> Contienen las rutas de direccionamiento al controlador.
Route::get('url', function(){return view('blade.template');}); : Retornar una vista
Route::post('url',[controller::class, 'function(store)']); : Ejecutar el metodo del controlador.

Directivas
@csrf : Tokens helper de Blade que muestra el campo para proteger la aplicación de ataques CSRF para formularios.
@method('function')

Function

public function store(Request $request){
    $request->validate([
        'value' => 'required|min:3'
    ]);

    $modelName = new ControllerName;
    $modelName->title = $request->title;
    $modelName->save();

    return redirect()->route('view');

}




Folders
app/ : Models, Controllers.
database/ : Migraciones
.env -> Configurar variables de entorno. Base de datos, Servidor de correo.












Crear modelos, migraciones, controladores a través de artisan

Model -> Se encarga de los datos, generalmente de la base de datos, pero podría ser un API, servicio web, sistema de archivos etc...
View -> Son la representación visual de los datos, todo lo que tenga que ver con la interfaz gráfica.
Controller -> Se encarga de controlar, recibe las órdenes del usuario y se encarga de solicitar los datos al modelo y de comunicárselo a la vista.  Actualización, consultas, búsquedas, modificaciones y validación de datos.

Step
1. Crear Base de Datos.
2. Crear y definir los Modelos para interactuar con la Base de Datos.
3. Crear los controladores que poseen los métodos create, store, show, edit, update, delete .
4. Crear y asociar las Rutas con los controller, models.


xxxxxxx
Migraciones interactuar con base de datos ORM

@include('section_name') -> Instancia la plantilla.























https://ajgallego.gitbooks.io/laravel-5/content/base_de_datos_query_builder.html

https://www.youtube.com/watch?v=7YvBOOSqM8k&list=PL1r3w0C4ClYRbiTB4o70CyJEW6hUWJ39X




app/http/controller -> Almacena las plantillas de los controladores.
config/database.php -> Configuracion del motor de base de datos al que deseamos conectarnos. 
resources/views/ -> Se almacenan las vistas de las páginas web.
public/ -> Almacena los recursos estáticos de nuestra aplicación, es decir, archivos css, js, imágenes y fuentes.
routes/web.php -> Almacena las rutas y peticiones de la aplicación.



Laravel Install
composer global require "laravel/installer" - > Instala el framework laravel por medio de composer.
laravel new project_name  -> Crea un nuevo proyecto con todas las librerías de Laravel.
composer create-project --prefer-dist laravel/laravel project_name "5.5.*" ->  Crea un nuevo proyecto con todas las librerías de Laravel a través de composer en la version 5.5.

Permissions on Linux
sudo chmod -R 777 /opt/lampp/htdocs/"project_name"/storage/ -> Otorga permisos a la carpeta storage
sudo chmod -R 777 /opt/lampp/htdocs/"project_name"/bootstrap/cache/ -> Otorga permisos a la carpeta caché de bootstrap. 

Shortcut
$this->withoutExceptionHandling(); ->Muestra por consola los errores de ejecución de un método.


Definición de Modelos
protected $table = 'bd_name'; = Define el nombre de la base de datos.
protected $primaryKey = 'id'; = Define el primer identificador de la tabla.
protected $fillable = ['BD_id1','BD_id2']  = Define en un arreglo los nombres de las tablas de base de datos.




Controller
app/Http/Controller -> Almacena las plantillas de los controladores. 
use App\model_name = importa las plantillas de los modelos para usar sus clases.

Query Builder

$value = DB::table('table_name')->get(); -> Obtiene un array de todos los datos de la DB y los almacena en una variable.
$value = DB::table('table_name')->select('parameters')->get(); -> Obtiene un array de un dato especificos en la DB.
$value = DB::table('table_name')->select(['parameter1', 'parameter2'])->get(); -> Obtiene un array de datos especificos en la DB.
$value = DB::table('table_name')->where('author', '=', 'Mario Puzo')->get(); -> Filtra y obtiene un objeto con los datos que cumplan la condición.

https://desarrolloweb.com/articulos/query-builder-laravel5.html


$value = DB::table('table_name')->first(); -> Obtiene el primer valor de una DB.
echo $value -> DB_Value; -> Imprime el primer valor de una DB a través del método first().


Eloquent

first() Método que imprime el primer registro. ex. $name_value = Model::where('sabor','vainilla')->first();
get() Método que imprime todos los registros de una BD. ex. $name_value = Model::where('sabor','vainilla')->get();				
dd($name_value); -> Imprime el contenido de la variable.

Insertar
$value_name = new Model; Crea un objeto para insertar en la BD.
$value_name->input('value'); -> Inserta parametros en un valor.
$pastel->save()

Actualizar
$value_name = Model::find(51); -> Busca el valor para actualizar.
$value_name->sabor = 'value_new'; -> Actualiza por el nuevo valor.
$value_name->save(); -> Guarda los cambios.

Delete
$value_name = Model::find(51); -> Busca el valor para eliminar.
$value_name->value_delete(); -> Elimina el valor.

Destruir
Model::destroy -> Destruye el registro por su id.


Scopes -> Crea funciones que permiten realizar consultas especificas.
public function scopeName($query){ return $query->where('sabor','vainilla');} -> FUncion que imprime todos los sabores de vainilla :v















 
